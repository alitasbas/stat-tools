args(qnorm)
args(pnorm)
x = 5
if (x) {}
if (x) {}
if (x) {
print("HI")
}
prob_to_z_score <- function(area, mu = 0, sd = 1, lower.tail = T) {
z <- qnorm(area, mu = mu, sd = sd, lower.tail = lower.tail)
return(z)
}
find_prob <- function(lower.int = F, upper.int = inf, mu = 0, sd = 1, lower.tail = T) {
if (lower.int) {
area <- pnorm(q = upper.int, mu = mu, sd = sd) - pnorm(q = lower.int, mu = mu, sd = sd)
} else {
area <- pnorm(q = upper.int, mu = mu, sd = sd)
}
return(area)
}
z_score <- function(x, mu = 0, sd = 1) {
z <- (x - mu) / sd
return(z)
}
prob_to_z_score(0.5)
prob_to_z_score <- function(area, mus = 0, sd = 1, lower.tail = T) {
z <- qnorm(area, mu = mus, sd = sd, lower.tail = lower.tail)
return(z)
}
prob_to_z_score(0.5)
args(qnorm)
prob_to_z_score <- function(area, mu = 0, sd = 1, lower.tail = T) {
z <- qnorm(area, mean = mus, sd = sd, lower.tail = lower.tail)
return(z)
}
find_prob <- function(lower.int = F, upper.int = inf, mu = 0, sd = 1, lower.tail = T) {
if (lower.int) {
area <- pnorm(q = upper.int, mean = mu, sd = sd) - pnorm(q = lower.int, mu = mu, sd = sd)
} else {
area <- pnorm(q = upper.int, mu = mu, sd = sd)
}
return(area)
}
z_score <- function(x, mu = 0, sd = 1) {
z <- (x - mu) / sd
return(z)
}
args(qnorm)
prob_to_z_score(0.5)
prob_to_z_score <- function(area, mu = 0, sd = 1, lower.tail = T) {
z <- qnorm(area, mean = mu, sd = sd, lower.tail = lower.tail)
return(z)
}
prob_to_z_score(0.5)
prob_to_z_score(0.51)
find_prob <- function(upper.int = inf, mu = 0, sd = 1, lower.int = F,  lower.tail = T) {
if (lower.int) {
area <- pnorm(q = upper.int, mean = mu, sd = sd) - pnorm(q = lower.int, mu = mu, sd = sd)
# ggplot2
} else if (lower.tail == F) {
area <- 1 - pnorm(q = upper.int, mu = mu, sd = sd)
} else {
area <- pnorm(q = upper.int, mu = mu, sd = sd)
}
return(area)
}
z_score <- function(x, mu = 0, sd = 1) {
z <- (x - mu) / sd
return(z)
}
prob_to_z_score <- function(area, mu = 0, sd = 1, lower.tail = T) {
z <- qnorm(area, mean = mu, sd = sd, lower.tail = lower.tail)
return(z)
}
prob_to_z_score(0.025, lower.tail = F)
prob_to_z_score(0.0251, lower.tail = F)
prob_to_z_score(0.0249, lower.tail = F)
find_prob <- function(z = inf, mu = 0, sd = 1, lower.int = F,  lower.tail = T) {
if (lower.int) {
area <- pnorm(q = z, mean = mu, sd = sd) - pnorm(q = lower.int, mu = mu, sd = sd)
# ggplot2
} else if (lower.tail == F) {
area <- 1 - pnorm(q = upper.int, mu = mu, sd = sd)
} else {
area <- pnorm(q = upper.int, mu = mu, sd = sd)
}
return(area)
}
find_prob(1.96, lower.int = 0)
find_prob <- function(z = inf, mu = 0, sd = 1, lower.bound = F,  lower.tail = T) {
if (lower.bound) {
area <- pnorm(q = z, mean = mu, sd = sd) - pnorm(q = lower.bound, mean = mu, sd = sd)
# ggplot2
} else if (lower.tail == F) {
area <- 1 - pnorm(q = upper.int, mean = mu, sd = sd)
} else {
area <- pnorm(q = upper.int, mean = mu, sd = sd)
}
return(area)
}
find_prob(1.96, lower.int = 0)
find_prob(1.96, lower.bound = 0)
find_prob <- function(z = inf, mu = 0, sd = 1, lower.bound = F,  lower.tail = T) {
if (lower.bound) {
area <- pnorm(q = z, mean = mu, sd = sd) - pnorm(q = lower.bound, mean = mu, sd = sd)
# ggplot2
} else if (lower.tail == F) {
area <- 1 - pnorm(q = z, mean = mu, sd = sd)
} else {
area <- pnorm(q = z, mean = mu, sd = sd)
}
return(area)
}
find_prob(1.96, lower.bound = 0)
# libraries
library(ggplot2)
data <- data.frame(values = rnorm(1000, mean = 0, sd = 1))
p <- ggplot(data, aes(x = values)) +
geom_density(fill = "blue", alpha = 0.5) +  # Density plot with blue fill and transparency
labs(title = "Normal Distribution", x = "Values", y = "Density")
p
dnorm(0.5)
dnorm(0)
x <- seq(-4, 4, 0.05); y <- dnorm(x)
ggplot(aes(x = x)) + geom_density(fill = "red", alpha = 0.7)
data <- data.frame(values = x)
ggplot(data, aes(x = values)) + geom_density(fill = "red", alpha = 0.7)
ggplot(data, aes(x = values)) + geom_density(fill = "red", alpha = 0.7) + coord_cartesian(xlim = c(-3.5, 3.5), ylim = c(0, 0.5))
data
# Create a ggplot object with the generated data
p <- ggplot(data, aes(x = values)) +
geom_density(fill = "blue", alpha = 0.5) +  # Density plot with blue fill and transparency
labs(title = "Normal Distribution", x = "Values", y = "Density") +
coord_cartesian(xlim = c(-3, 3), ylim = c(0, 0.4))  # Adjust ylim as needed
# Print the plot
print(p)
y = dnorm(x)
data <- data.frame(values = x, p = y)
# Create a ggplot object with the generated data
p <- ggplot(data, aes(x = values)) +
geom_density(fill = "blue", alpha = 0.5) +  # Density plot with blue fill and transparency
labs(title = "Normal Distribution", x = "Values", y = "Density") +
coord_cartesian(xlim = c(-3, 3), ylim = c(0, 0.4))  # Adjust ylim as needed
# Print the plot
print(p)
ggplot(data, aes(x = values, y = p)) + geom_density(fill = "red", alpha = 0.7)
ggplot(data, aes(x = values, y = p)) + geom_line(fill = "red", alpha = 0.7)
normal_table <- data.frame(x = seq(-4, 4, 0.05), y = dnorm(seq(-4, 4, 0.05)))
shaded_area = normal_table[normal_table$x <= 1.7 & normal_table$x >= 0.8, "y"]
plot <- ggplot(normal_table, aes(x, y)) + geom_line() +
geom_ribbon(shaded_area, aes(x, ymin = 0, ymax = y), fill = "skyblue", alpha = 0.7) +
labs(title = "Standard Normal Distribution with Shaded Area", x = "Values", y = "Density")
plot
ggplot(normal_table, aes(x, y)) + geom_line() +
+     geom_ribbon(shaded_area, aes(x, ymin = 0, ymax = y), fill = "skyblue", alpha = 0.7) +
+     labs(title = "Standard Normal Distribution with Shaded Area", x = "Values", y = "Density")
ggplot(normal_table, aes(x, y)) + geom_line() +
+     geom_ribbon(shaded_area, aes(x, ymin = 0, ymax = y), fill = "skyblue", alpha = 0.7) +
+     labs(title = "Standard Normal Distribution with Shaded Area", x = "Values", y = "Density")
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
find_prob(z = 1.8, lower.bound = 0.6)
normal_table
plot(normal_table)
shaded_area = normal_table[normal_table$x <= 1.9 & normal_table$x >= 0.8, "y"]
head(shaded_area)
shaded_area
p <- ggplot(normal_table, aes(x, y)) + geom_line()
p
p + geom_ribbon(shaded_area, aes(x, ymin = 0, ymax = y), fill = "skyblue", alpha = 0.7)
rlang::last_trace()
p + geom_ribbon(shaded_area, aes(x = x, y = y))
p + geom_ribbon(data = shaded_area, aes(x = x, y = y))
shaded_area
shaded_area = normal_table[normal_table$x <= z & normal_table$x >= lower.bound,]
shaded_area = normal_table[normal_table$x <= 1.7 & normal_table$x >= 0.2,]
p + geom_ribbon(data = shaded_area, aes(x = x, y = y))
p + geom_ribbon(shaded_area, aes(x, ymin = 0, ymax = y), fill = "skyblue", alpha = 0.7)
p + geom_ribbon(data = shaded_area, aes(x, ymin = 0, ymax = y), fill = "skyblue", alpha = 0.7)
p + geom_ribbon(data = shaded_area, aes(x, ymin = 0, ymax = y), fill = "skyblue", alpha = 0.7) +annotate("text", x = 3, y = 0.25, label = area, hjust = 0.5, vjust = -0.5, color = "skyblue")
p + geom_ribbon(data = shaded_area, aes(x, ymin = 0, ymax = y), fill = "skyblue", alpha = 0.7) +annotate("text", x = 3, y = 0.25, label = "area", hjust = 0.5, vjust = -0.5, color = "skyblue")
p + geom_ribbon(data = shaded_area, aes(x, ymin = 0, ymax = y), fill = "skyblue", alpha = 0.7) +annotate("text", x = 3, y = 0.25, label = "area", hjust = 0.5, vjust = -2, color = "skyblue")
p + geom_ribbon(data = shaded_area, aes(x, ymin = 0, ymax = y), fill = "skyblue", alpha = 0.7) +annotate("text", x = 3, y = 0.25, label = "area", hjust = 0.5, vjust = 2, color = "skyblue")
p + geom_ribbon(data = shaded_area, aes(x, ymin = 0, ymax = y), fill = "skyblue", alpha = 0.7) +annotate("text", x = 3, y = 0.25, label = "area", hjust = 0.5, vjust = 2, color = "skyblue") + theme(text = element_text(size = 14))
p + geom_ribbon(data = shaded_area, aes(x, ymin = 0, ymax = y), fill = "skyblue", alpha = 0.7) +annotate("text", x = 3, y = 0.25, label = "area", hjust = 0.5, vjust = 2, color = "skyblue") + theme(text = element_text(size = 34))
p + geom_ribbon(data = shaded_area, aes(x, ymin = 0, ymax = y), fill = "skyblue", alpha = 0.7) +annotate("text", x = 3, y = 0.25, label = "area", hjust = 0.5, vjust = 2, color = "skyblue", size = 6)
p + geom_ribbon(data = shaded_area, aes(x, ymin = 0, ymax = y), fill = "skyblue", alpha = 0.7) +annotate("text", x = 3, y = 0.25, label = "area", hjust = 0.5, vjust = 2, color = "skyblue", size = 10)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
find_prob(z = 1.63, lower.bound = -1.2)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
find_prob(z = 1.63, lower.bound = -1.2)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
find_prob(z = 1.63, lower.bound = -1.2)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
find_prob(z = 1.63, lower.bound = -1.2)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
find_prob(z = 1.63, lower.bound = -1.2)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
find_prob(z = 1.63, lower.bound = -1.2)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
find_prob(z = 1.63, lower.bound = -1.2)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
find_prob(z = 1.63, lower.bound = -1.2)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
find_prob(z = 1.63, lower.bound = -1.2)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
find_prob(z = 1.63, lower.bound = -1.2)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
find_prob(z = 1.63, lower.bound = -1.2)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
find_prob(z = 1.63, lower.bound = -1.2)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
find_prob(z = 1.63, lower.bound = -1.2)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
find_prob(z = 1.63, lower.bound = -1.2)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
find_prob(z = 1.63, lower.bound = -1.2)
normal_table <- data.frame(x = seq(-4, 4, 0.05), y = dnorm(seq(-4, 4, 0.05)))
plot <- ggplot(normal_table, aes(x, y)) + geom_line() + geom_ribbon()
# libraries
library(ggplot2)
plot <- ggplot(normal_table, aes(x, y)) + geom_line() + geom_ribbon()
plot
plot <- ggplot(normal_table, aes(x, y)) + geom_line() + geom_ribbon(data = shaded_area, aes(x, ymin = 0, ymax = y), fill = "red", alpha = 0.7)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
shaded_area = normal_table[normal_table$x <= 1.5, ]
plot <- ggplot(normal_table, aes(x, y)) + geom_line() + geom_ribbon(data = shaded_area, aes(x, ymin = 0, ymax = y), fill = "red", alpha = 0.7)
plot
plot + geom_vline(xintercept = 0, linetype = "dashed", color = "green", size = 1.5)
plot + geom_vline(xintercept = 0, ymax = 0.4, linetype = "dashed", color = "green", size = 0.5)
help(geom_vline)
args(geom_vline)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
prob_to_z_score(0.596)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
prob_to_z_score(0.596)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
prob_to_z_score(0.596)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
prob_to_z_score(0.596)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
prob_to_z_score(0.596)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
prob_to_z_score(0.596)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
prob_to_z_score(0.596)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
prob_to_z_score(0.596)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
prob_to_z_score(0.596)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
prob_to_z_score(0.596)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
prob_to_z_score(0.596)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
prob_to_z_score(0.596)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
prob_to_z_score(0.596)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
prob_to_z_score(0.596)
source("D:/Becoming Dev/stat-tools/utils.r", echo=TRUE)
prob_to_z_score(0.596)
prob_to_z_score(0.35)
prob_to_z_score(0.85)
prob_to_z_score(0.95)
